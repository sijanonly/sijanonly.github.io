<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CODEBUG (Posts about perceptron)</title><link>https://sijanb.com.np/</link><description></description><atom:link href="https://sijanb.com.np/categories/perceptron.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:sijanonly@gmail.com"&gt;Sijan Bhandari&lt;/a&gt; </copyright><lastBuildDate>Sun, 21 Apr 2024 20:16:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using perceptron model for classification : an illustrative approach</title><link>https://sijanb.com.np/posts/using-perceptron-model-for-classification-an-illustrative-approach/</link><dc:creator>Sijan Bhandari</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;In this post, we are going to devise a measurement tool (perceptron model) in order to classify : whether a person is infected by a diseases or not.&lt;/p&gt;
&lt;p&gt;In binary terms, the output will be
{
1   if infected
0   not infected
}&lt;/p&gt;
&lt;p&gt;To build inputs for our neural network, we take readings from the patients and we will treat readings as follows :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  body temperature = {
                          1   if body temperator &amp;gt; 99'F
                         -1   if body temperator = 99'F
                     }
  
  heart rate = {
                      1   if heart rate &amp;gt; 60 to 100
                     -1   if heart rate = 60 to 100
                 }
  
   blood pressure = {
                          1   if heart rate &amp;gt; 120/80
                         -1   if heart rate = 120/80
                     }
 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, input from each patient will be represented as a three dimensional vector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  input = (body temperatur, heart rate, blood pressure)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, a person can now be represented as :
(1, -1, 1)
i.e (body temperator &amp;gt; 99'F, heart rate = 60 to 100, heart rate &amp;gt; 120/80)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let us create two inputs with desired output value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      x1 = (1, 1, 1), d1 = 1 (infected)
       x2 = (-1, -1, -1), d2 = 0 (not infected)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us take initial values for weights and biases:
weights, w0 = (-1, 0.5, 0)
bias, b0 = 0.5&lt;/p&gt;
&lt;p&gt;And, activation function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         A(S)   = {
                    1 if S &amp;gt;=0
                    0 otherwise
                  }&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="STEP-1"&gt;STEP 1&lt;a class="anchor-link" href="https://sijanb.com.np/posts/using-perceptron-model-for-classification-an-illustrative-approach/#STEP-1"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Feed &lt;code&gt;x1 = (1, 1, 1)&lt;/code&gt; into the network.&lt;/p&gt;
&lt;p&gt;weighted_sum:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S = (-1, 0.5, 0) * (1, 1, 1)^T + 0
  = -1 + 0.5 + 0 + 0
  = -0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When passed through activation function A(-0.5) = 0 = y1
We passed an &lt;code&gt;infected&lt;/code&gt; input vector, but our perceptron classified it as &lt;code&gt;not infected&lt;/code&gt;.
Let's calculate the error term:
e = d1 - y1 = 1 - 0 = 1
Update weight as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             w1 = w0 + e * x1 = (-1, 0.5, 0) + 1 * (1, 1, 1) = (0, 1.5, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, update bias as:
b1 = b0 + e = 1&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="STEP-2"&gt;STEP 2&lt;a class="anchor-link" href="https://sijanb.com.np/posts/using-perceptron-model-for-classification-an-illustrative-approach/#STEP-2"&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Now, we feed second input &lt;code&gt;(-1, -1, -1)&lt;/code&gt; into our network.&lt;/p&gt;
&lt;p&gt;weighted_sum :
S = w1 * x2^T + b1
= (0, 1.5, 1) * (-1, -1, -1)^T + 1
= -1.5 - 1 + 1
= -1.5
When passed through activation function A(-1.5) = 0 = y2
We passed an &lt;code&gt;not infected&lt;/code&gt; input vector, and our perceptron successfully classified it as &lt;code&gt;not infected&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="STEP-3"&gt;STEP 3&lt;a class="anchor-link" href="https://sijanb.com.np/posts/using-perceptron-model-for-classification-an-illustrative-approach/#STEP-3"&gt;¶&lt;/a&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Since, our first input is mis-classified, so we will go for it.&lt;/p&gt;
&lt;p&gt;weighted_sum :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S = w1 * x1^T + b1 
  = (0, 1.5, 1) * (1, 1, 1)^T + 1
  = 1.5 + 1 + 1
  = 3.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When passed through activation function A(3.5) = 1 = y3
We passed an &lt;code&gt;infected&lt;/code&gt; input vector, and our perceptron successfully classified it as &lt;code&gt;infected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, both input vectors are correctly classified. i.e algorithm is converged to a solution point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>perceptron</category><guid>https://sijanb.com.np/posts/using-perceptron-model-for-classification-an-illustrative-approach/</guid><pubDate>Tue, 23 Oct 2018 20:42:54 GMT</pubDate></item><item><title>What is perceptron and how it works?</title><link>https://sijanb.com.np/posts/what-is-perceptron-and-how-it-works/</link><dc:creator>Sijan Bhandari</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Perceptron is simply an artificial neuron capable of solving linear classification problems. It is made up of single layer feed-forward neural network.&lt;/p&gt;
&lt;p&gt;A percentron can only takes binary input values and signals binary output for decision making.
The output decision (either0 or 1), is based on the value of weighted sum of inputs and weights.&lt;/p&gt;
&lt;p&gt;Mathematically perceptron can be defined as :&lt;/p&gt;
&lt;p&gt;output O(n)=&lt;br&gt;
                              {
   0   if   ∑wixi + $\theta$ &amp;lt;= 0 &lt;br&gt;
                                                 1   if   ∑wixi + $\theta$ &amp;gt; 0
&lt;br&gt;
                                     } &lt;br&gt;&lt;/p&gt;
&lt;p&gt;$\theta$ = threshold / bias&lt;/p&gt;
&lt;img alt="No description has been provided for this image" src="https://sijanb.com.np/images/perceptron.png"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="https://sijanb.com.np/posts/what-is-perceptron-and-how-it-works/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>perceptron</category><guid>https://sijanb.com.np/posts/what-is-perceptron-and-how-it-works/</guid><pubDate>Tue, 23 Oct 2018 20:36:47 GMT</pubDate></item></channel></rss>